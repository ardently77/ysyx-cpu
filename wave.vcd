$version Generated by VerilatedVcd $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire  1 G clk $end
  $var wire 32 I inst [31:0] $end
  $var wire 32 J inst_addr [31:0] $end
  $var wire  1 H rest $end
  $scope module cpu_top $end
   $var wire 32 P busa [31:0] $end
   $var wire 32 Q busw [31:0] $end
   $var wire  1 G clk $end
   $var wire  3 N funct3 [2:0] $end
   $var wire 32 O imm [31:0] $end
   $var wire 32 I inst [31:0] $end
   $var wire 32 J inst_addr [31:0] $end
   $var wire 32 $ next_pc [31:0] $end
   $var wire  7 K op [6:0] $end
   $var wire 32 % pc [31:0] $end
   $var wire  5 M rd [4:0] $end
   $var wire 32 # register_0 [31:0] $end
   $var wire  1 R regwr $end
   $var wire  1 H rest $end
   $var wire  5 L rs1 [4:0] $end
   $scope module alu $end
    $var wire 32 P add_a [31:0] $end
    $var wire 32 O add_b [31:0] $end
    $var wire 32 Q add_result [31:0] $end
    $var wire 32 Q alu_result [31:0] $end
    $var wire 32 P alu_src1 [31:0] $end
    $var wire 32 O alu_src2 [31:0] $end
    $var wire  1 S cin $end
   $upscope $end
   $scope module ctrl $end
    $var wire  3 N funct3 [2:0] $end
    $var wire  7 K op [6:0] $end
    $var wire 32 # register_0 [31:0] $end
    $var wire  1 R regwr $end
   $upscope $end
   $scope module decode $end
    $var wire  3 N funct3 [2:0] $end
    $var wire 32 O imm [31:0] $end
    $var wire 32 O immI [31:0] $end
    $var wire 32 I inst [31:0] $end
    $var wire  7 K op [6:0] $end
    $var wire  5 M rd [4:0] $end
    $var wire  5 L rs1 [4:0] $end
   $upscope $end
   $scope module nextaddr $end
    $var wire 32 $ next_pc [31:0] $end
    $var wire 32 % pc [31:0] $end
   $upscope $end
   $scope module pc_reg $end
    $var wire  1 G clk $end
    $var wire 32 $ next_pc [31:0] $end
    $var wire 32 % pc [31:0] $end
    $var wire  1 H rest $end
    $scope module i0 $end
     $var wire 32 U RESET_VAL [31:0] $end
     $var wire 32 T WIDTH [31:0] $end
     $var wire  1 G clk $end
     $var wire 32 $ din [31:0] $end
     $var wire 32 % dout [31:0] $end
     $var wire  1 H rst $end
     $var wire  1 V wen $end
    $upscope $end
   $upscope $end
   $scope module regfile $end
    $var wire  1 G clk $end
    $var wire  5 L raddr1 [4:0] $end
    $var wire  5 W raddr2 [4:0] $end
    $var wire 32 P rdata1 [31:0] $end
    $var wire 32 & rdata2 [31:0] $end
    $var wire 32 # register_0 [31:0] $end
    $var wire  5 M waddr [4:0] $end
    $var wire 32 Q wdata [31:0] $end
    $var wire  1 R we $end
    $scope module r0 $end
     $var wire 32 X ADDR_WIDTH [31:0] $end
     $var wire 32 T DATA_WIDTH [31:0] $end
     $var wire  1 G clk $end
     $var wire  5 L raddr1 [4:0] $end
     $var wire  5 W raddr2 [4:0] $end
     $var wire 32 P rdata1 [31:0] $end
     $var wire 32 & rdata2 [31:0] $end
     $var wire 32 # register_0 [31:0] $end
     $var wire 32 ' rf[0] [31:0] $end
     $var wire 32 1 rf[10] [31:0] $end
     $var wire 32 2 rf[11] [31:0] $end
     $var wire 32 3 rf[12] [31:0] $end
     $var wire 32 4 rf[13] [31:0] $end
     $var wire 32 5 rf[14] [31:0] $end
     $var wire 32 6 rf[15] [31:0] $end
     $var wire 32 7 rf[16] [31:0] $end
     $var wire 32 8 rf[17] [31:0] $end
     $var wire 32 9 rf[18] [31:0] $end
     $var wire 32 : rf[19] [31:0] $end
     $var wire 32 ( rf[1] [31:0] $end
     $var wire 32 ; rf[20] [31:0] $end
     $var wire 32 < rf[21] [31:0] $end
     $var wire 32 = rf[22] [31:0] $end
     $var wire 32 > rf[23] [31:0] $end
     $var wire 32 ? rf[24] [31:0] $end
     $var wire 32 @ rf[25] [31:0] $end
     $var wire 32 A rf[26] [31:0] $end
     $var wire 32 B rf[27] [31:0] $end
     $var wire 32 C rf[28] [31:0] $end
     $var wire 32 D rf[29] [31:0] $end
     $var wire 32 ) rf[2] [31:0] $end
     $var wire 32 E rf[30] [31:0] $end
     $var wire 32 F rf[31] [31:0] $end
     $var wire 32 * rf[3] [31:0] $end
     $var wire 32 + rf[4] [31:0] $end
     $var wire 32 , rf[5] [31:0] $end
     $var wire 32 - rf[6] [31:0] $end
     $var wire 32 . rf[7] [31:0] $end
     $var wire 32 / rf[8] [31:0] $end
     $var wire 32 0 rf[9] [31:0] $end
     $var wire  5 M waddr [4:0] $end
     $var wire 32 Q wdata [31:0] $end
     $var wire  1 R we $end
    $upscope $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000000000000000000000000000 #
b00000000000000000000000000000100 $
b00000000000000000000000000000000 %
b00000000000000000000000000000000 &
b00000000000000000000000000000000 '
b00000000000000000000000000000000 (
b00000000000000000000000000000000 )
b00000000000000000000000000000000 *
b00000000000000000000000000000000 +
b00000000000000000000000000000000 ,
b00000000000000000000000000000000 -
b00000000000000000000000000000000 .
b00000000000000000000000000000000 /
b00000000000000000000000000000000 0
b00000000000000000000000000000000 1
b00000000000000000000000000000000 2
b00000000000000000000000000000000 3
b00000000000000000000000000000000 4
b00000000000000000000000000000000 5
b00000000000000000000000000000000 6
b00000000000000000000000000000000 7
b00000000000000000000000000000000 8
b00000000000000000000000000000000 9
b00000000000000000000000000000000 :
b00000000000000000000000000000000 ;
b00000000000000000000000000000000 <
b00000000000000000000000000000000 =
b00000000000000000000000000000000 >
b00000000000000000000000000000000 ?
b00000000000000000000000000000000 @
b00000000000000000000000000000000 A
b00000000000000000000000000000000 B
b00000000000000000000000000000000 C
b00000000000000000000000000000000 D
b00000000000000000000000000000000 E
b00000000000000000000000000000000 F
1G
1H
b00000000000000000000000000000000 I
b00000000000000000000000000000000 J
b0000000 K
b00000 L
b00000 M
b000 N
b00000000000000000000000000000000 O
b00000000000000000000000000000000 P
b00000000000000000000000000000000 Q
0R
0S
b00000000000000000000000000100000 T
b10000000000000000000000000000000 U
1V
b00000 W
b00000000000000000000000000000101 X
#1
0G
#2
b10000000000000000000000000000100 $
b10000000000000000000000000000000 %
1G
b10000000000000000000000000000000 J
#3
0G
0H
b00000000000000000000000010010011 I
b0010011 K
b00001 M
1R
#4
b10000000000000000000000000001000 $
b10000000000000000000000000000100 %
1G
b10000000000000000000000000000100 J
#5
0G
b00000000000100001000000100010011 I
b00001 L
b00010 M
b00000000000000000000000000000001 O
b00000000000000000000000000000001 Q
#6
b10000000000000000000000000001100 $
b10000000000000000000000000001000 %
b00000000000000000000000000000001 )
1G
b10000000000000000000000000001000 J
#7
0G
b00000000000100010000000110010011 I
b00010 L
b00011 M
b00000000000000000000000000000001 P
b00000000000000000000000000000010 Q
#8
b10000000000000000000000000010000 $
b10000000000000000000000000001100 %
b00000000000000000000000000000010 *
1G
b10000000000000000000000000001100 J
#24
0G
b00000000000100000000000001110011 I
b1110011 K
b00000 L
b00000 M
b00000000000000000000000000000000 P
b00000000000000000000000000000001 Q
0R
